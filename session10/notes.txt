Cache:

Caching is a mechanism to enhance the performance of a system. It is a temporary memory that lies between the application and the persistent database. Cache memory stores recently used data items in order to reduce the number of database hits as much as possible.

Configuring the Cache Provider:
JCache (JSR-107) (EhCache 3, Hazelcast, Infinispan, and others)
EhCache (example)
Hazelcast
Infinispan
Couchbase
Redis
Caffeine (example)
Simple cache

Spring Cache Annotations:
@Cacheable: Triggers cache population.
@CacheEvict: Triggers cache eviction.
@CachePut: Updates the cache without interfering with the method execution.
@Caching: Regroups multiple cache operations to be applied on a method.
@CacheConfig: Shares some standard cache-related settings at the class level.

@Cacheable:
It is used on the method level to let spring know that the response of the method is cacheable. Spring intercepts the request/response of this method and stores the response in the cache by the name specified in the annotation attribute e.g. @Cacheable(“employees”).

Since caches are essentially key-value stores, each invocation of a cached method needs to be translated into a suitable key for cache access. By default, Spring uses the method parameters to form the cache keys as follows:

If no params are given, return SimpleKey.EMPTY.
If only one param is given, return that instance.
If more than one param is given, return a SimpleKey that contains all parameters.

We can also do the caching only when a certain condition is satisfied. In the following example, we are caching when the employee id is greater than 0;

@Cacheable(value = "employees", key = "#id", condition="#id > 0")

@Caching:
The @Caching annotation is needed to group multiple annotations when we need to use multiple cache annotations in a single method. In the following example, we are using the @CacheEvict annotation, twice.

@Caching(evict = {
    @CacheEvict(cacheNames = "departments", allEntries = true), 
    @CacheEvict(cacheNames = "employees", key = "...")})
public boolean importEmployees(List<Employee> data) { ... }

@CacheConfig
@Service
@CacheConfig(cacheNames={"employees"})
public class EmployeeService {

  @Autowired
  EmployeeRepository repository;

  @Cacheable(key = "#id")
  public Optional<Employee> getEmployeeById(Long id) { ... }

  @CachePut(key = "#employee.id")
  public Employee updateEmployee(Employee employee) { ... }
}